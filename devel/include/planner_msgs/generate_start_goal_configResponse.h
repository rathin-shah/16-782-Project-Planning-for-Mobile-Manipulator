// Generated by gencpp from file planner_msgs/generate_start_goal_configResponse.msg
// DO NOT EDIT!


#ifndef PLANNER_MSGS_MESSAGE_GENERATE_START_GOAL_CONFIGRESPONSE_H
#define PLANNER_MSGS_MESSAGE_GENERATE_START_GOAL_CONFIGRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planner_msgs
{
template <class ContainerAllocator>
struct generate_start_goal_configResponse_
{
  typedef generate_start_goal_configResponse_<ContainerAllocator> Type;

  generate_start_goal_configResponse_()
    : start_conf()
    , goal_conf()
    , success(false)  {
    }
  generate_start_goal_configResponse_(const ContainerAllocator& _alloc)
    : start_conf(_alloc)
    , goal_conf(_alloc)
    , success(false)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _start_conf_type;
  _start_conf_type start_conf;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _goal_conf_type;
  _goal_conf_type goal_conf;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator> const> ConstPtr;

}; // struct generate_start_goal_configResponse_

typedef ::planner_msgs::generate_start_goal_configResponse_<std::allocator<void> > generate_start_goal_configResponse;

typedef boost::shared_ptr< ::planner_msgs::generate_start_goal_configResponse > generate_start_goal_configResponsePtr;
typedef boost::shared_ptr< ::planner_msgs::generate_start_goal_configResponse const> generate_start_goal_configResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator1> & lhs, const ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator2> & rhs)
{
  return lhs.start_conf == rhs.start_conf &&
    lhs.goal_conf == rhs.goal_conf &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator1> & lhs, const ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b054f150db038bf449f81cab30f2cf52";
  }

  static const char* value(const ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb054f150db038bf4ULL;
  static const uint64_t static_value2 = 0x49f81cab30f2cf52ULL;
};

template<class ContainerAllocator>
struct DataType< ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner_msgs/generate_start_goal_configResponse";
  }

  static const char* value(const ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"#Start and Goal Config\n"
"float64[] start_conf\n"
"float64[] goal_conf\n"
"\n"
"#Result of Start and Goal Config Generation\n"
"bool success\n"
;
  }

  static const char* value(const ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_conf);
      stream.next(m.goal_conf);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct generate_start_goal_configResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner_msgs::generate_start_goal_configResponse_<ContainerAllocator>& v)
  {
    s << indent << "start_conf[]" << std::endl;
    for (size_t i = 0; i < v.start_conf.size(); ++i)
    {
      s << indent << "  start_conf[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.start_conf[i]);
    }
    s << indent << "goal_conf[]" << std::endl;
    for (size_t i = 0; i < v.goal_conf.size(); ++i)
    {
      s << indent << "  goal_conf[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.goal_conf[i]);
    }
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MSGS_MESSAGE_GENERATE_START_GOAL_CONFIGRESPONSE_H
