// Generated by gencpp from file planner_msgs/generate_start_goal_configRequest.msg
// DO NOT EDIT!


#ifndef PLANNER_MSGS_MESSAGE_GENERATE_START_GOAL_CONFIGREQUEST_H
#define PLANNER_MSGS_MESSAGE_GENERATE_START_GOAL_CONFIGREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <planner_msgs/array2d_double.h>

namespace planner_msgs
{
template <class ContainerAllocator>
struct generate_start_goal_configRequest_
{
  typedef generate_start_goal_configRequest_<ContainerAllocator> Type;

  generate_start_goal_configRequest_()
    : start_ee_pose()
    , constraint_vec_start_pose()
    , goal_ee_pose()
    , constraint_vec_goal_pose()
    , target_coordinate_dev()
    , show_motion(false)  {
    }
  generate_start_goal_configRequest_(const ContainerAllocator& _alloc)
    : start_ee_pose(_alloc)
    , constraint_vec_start_pose(_alloc)
    , goal_ee_pose(_alloc)
    , constraint_vec_goal_pose(_alloc)
    , target_coordinate_dev(_alloc)
    , show_motion(false)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _start_ee_pose_type;
  _start_ee_pose_type start_ee_pose;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _constraint_vec_start_pose_type;
  _constraint_vec_start_pose_type constraint_vec_start_pose;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _goal_ee_pose_type;
  _goal_ee_pose_type goal_ee_pose;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _constraint_vec_goal_pose_type;
  _constraint_vec_goal_pose_type constraint_vec_goal_pose;

   typedef  ::planner_msgs::array2d_double_<ContainerAllocator>  _target_coordinate_dev_type;
  _target_coordinate_dev_type target_coordinate_dev;

   typedef uint8_t _show_motion_type;
  _show_motion_type show_motion;





  typedef boost::shared_ptr< ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator> const> ConstPtr;

}; // struct generate_start_goal_configRequest_

typedef ::planner_msgs::generate_start_goal_configRequest_<std::allocator<void> > generate_start_goal_configRequest;

typedef boost::shared_ptr< ::planner_msgs::generate_start_goal_configRequest > generate_start_goal_configRequestPtr;
typedef boost::shared_ptr< ::planner_msgs::generate_start_goal_configRequest const> generate_start_goal_configRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator1> & lhs, const ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator2> & rhs)
{
  return lhs.start_ee_pose == rhs.start_ee_pose &&
    lhs.constraint_vec_start_pose == rhs.constraint_vec_start_pose &&
    lhs.goal_ee_pose == rhs.goal_ee_pose &&
    lhs.constraint_vec_goal_pose == rhs.constraint_vec_goal_pose &&
    lhs.target_coordinate_dev == rhs.target_coordinate_dev &&
    lhs.show_motion == rhs.show_motion;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator1> & lhs, const ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "79a916826efddd8cc7004329adcb7230";
  }

  static const char* value(const ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x79a916826efddd8cULL;
  static const uint64_t static_value2 = 0xc7004329adcb7230ULL;
};

template<class ContainerAllocator>
struct DataType< ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner_msgs/generate_start_goal_configRequest";
  }

  static const char* value(const ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"#Start EE pose\n"
"float64[] start_ee_pose\n"
"int32[] constraint_vec_start_pose\n"
"\n"
"#Goal EE pose\n"
"float64[] goal_ee_pose\n"
"int32[] constraint_vec_goal_pose\n"
"\n"
"#Permitted displacement of EE w.r.t target frame\n"
"array2d_double target_coordinate_dev\n"
"\n"
"#Flag to show config generation in rviz\n"
"bool show_motion\n"
"\n"
"\n"
"================================================================================\n"
"MSG: planner_msgs/array2d_double\n"
"array1d_double[] array2d_double\n"
"================================================================================\n"
"MSG: planner_msgs/array1d_double\n"
"float64[] array1d_double\n"
;
  }

  static const char* value(const ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_ee_pose);
      stream.next(m.constraint_vec_start_pose);
      stream.next(m.goal_ee_pose);
      stream.next(m.constraint_vec_goal_pose);
      stream.next(m.target_coordinate_dev);
      stream.next(m.show_motion);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct generate_start_goal_configRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner_msgs::generate_start_goal_configRequest_<ContainerAllocator>& v)
  {
    s << indent << "start_ee_pose[]" << std::endl;
    for (size_t i = 0; i < v.start_ee_pose.size(); ++i)
    {
      s << indent << "  start_ee_pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.start_ee_pose[i]);
    }
    s << indent << "constraint_vec_start_pose[]" << std::endl;
    for (size_t i = 0; i < v.constraint_vec_start_pose.size(); ++i)
    {
      s << indent << "  constraint_vec_start_pose[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.constraint_vec_start_pose[i]);
    }
    s << indent << "goal_ee_pose[]" << std::endl;
    for (size_t i = 0; i < v.goal_ee_pose.size(); ++i)
    {
      s << indent << "  goal_ee_pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.goal_ee_pose[i]);
    }
    s << indent << "constraint_vec_goal_pose[]" << std::endl;
    for (size_t i = 0; i < v.constraint_vec_goal_pose.size(); ++i)
    {
      s << indent << "  constraint_vec_goal_pose[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.constraint_vec_goal_pose[i]);
    }
    s << indent << "target_coordinate_dev: ";
    s << std::endl;
    Printer< ::planner_msgs::array2d_double_<ContainerAllocator> >::stream(s, indent + "  ", v.target_coordinate_dev);
    s << indent << "show_motion: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.show_motion);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MSGS_MESSAGE_GENERATE_START_GOAL_CONFIGREQUEST_H
