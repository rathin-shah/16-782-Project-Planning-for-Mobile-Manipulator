// Generated by gencpp from file planner_msgs/set_edge_costsRequest.msg
// DO NOT EDIT!


#ifndef PLANNER_MSGS_MESSAGE_SET_EDGE_COSTSREQUEST_H
#define PLANNER_MSGS_MESSAGE_SET_EDGE_COSTSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planner_msgs
{
template <class ContainerAllocator>
struct set_edge_costsRequest_
{
  typedef set_edge_costsRequest_<ContainerAllocator> Type;

  set_edge_costsRequest_()
    : edge_costs()  {
    }
  set_edge_costsRequest_(const ContainerAllocator& _alloc)
    : edge_costs(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _edge_costs_type;
  _edge_costs_type edge_costs;





  typedef boost::shared_ptr< ::planner_msgs::set_edge_costsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner_msgs::set_edge_costsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct set_edge_costsRequest_

typedef ::planner_msgs::set_edge_costsRequest_<std::allocator<void> > set_edge_costsRequest;

typedef boost::shared_ptr< ::planner_msgs::set_edge_costsRequest > set_edge_costsRequestPtr;
typedef boost::shared_ptr< ::planner_msgs::set_edge_costsRequest const> set_edge_costsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner_msgs::set_edge_costsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner_msgs::set_edge_costsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner_msgs::set_edge_costsRequest_<ContainerAllocator1> & lhs, const ::planner_msgs::set_edge_costsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.edge_costs == rhs.edge_costs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner_msgs::set_edge_costsRequest_<ContainerAllocator1> & lhs, const ::planner_msgs::set_edge_costsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::set_edge_costsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::set_edge_costsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::set_edge_costsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::set_edge_costsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::set_edge_costsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::set_edge_costsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner_msgs::set_edge_costsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7917a1c55c4fd645cb5c880309755be";
  }

  static const char* value(const ::planner_msgs::set_edge_costsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7917a1c55c4fd64ULL;
  static const uint64_t static_value2 = 0x5cb5c880309755beULL;
};

template<class ContainerAllocator>
struct DataType< ::planner_msgs::set_edge_costsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner_msgs/set_edge_costsRequest";
  }

  static const char* value(const ::planner_msgs::set_edge_costsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner_msgs::set_edge_costsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Edge costs for c-space coordinates\n"
"float64[] edge_costs\n"
"\n"
;
  }

  static const char* value(const ::planner_msgs::set_edge_costsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner_msgs::set_edge_costsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.edge_costs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct set_edge_costsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner_msgs::set_edge_costsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner_msgs::set_edge_costsRequest_<ContainerAllocator>& v)
  {
    s << indent << "edge_costs[]" << std::endl;
    for (size_t i = 0; i < v.edge_costs.size(); ++i)
    {
      s << indent << "  edge_costs[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.edge_costs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MSGS_MESSAGE_SET_EDGE_COSTSREQUEST_H
