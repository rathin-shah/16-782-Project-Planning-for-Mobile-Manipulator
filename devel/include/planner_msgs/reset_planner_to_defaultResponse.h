// Generated by gencpp from file planner_msgs/reset_planner_to_defaultResponse.msg
// DO NOT EDIT!


#ifndef PLANNER_MSGS_MESSAGE_RESET_PLANNER_TO_DEFAULTRESPONSE_H
#define PLANNER_MSGS_MESSAGE_RESET_PLANNER_TO_DEFAULTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planner_msgs
{
template <class ContainerAllocator>
struct reset_planner_to_defaultResponse_
{
  typedef reset_planner_to_defaultResponse_<ContainerAllocator> Type;

  reset_planner_to_defaultResponse_()
    : reinitialized(false)  {
    }
  reset_planner_to_defaultResponse_(const ContainerAllocator& _alloc)
    : reinitialized(false)  {
  (void)_alloc;
    }



   typedef uint8_t _reinitialized_type;
  _reinitialized_type reinitialized;





  typedef boost::shared_ptr< ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator> const> ConstPtr;

}; // struct reset_planner_to_defaultResponse_

typedef ::planner_msgs::reset_planner_to_defaultResponse_<std::allocator<void> > reset_planner_to_defaultResponse;

typedef boost::shared_ptr< ::planner_msgs::reset_planner_to_defaultResponse > reset_planner_to_defaultResponsePtr;
typedef boost::shared_ptr< ::planner_msgs::reset_planner_to_defaultResponse const> reset_planner_to_defaultResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator1> & lhs, const ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator2> & rhs)
{
  return lhs.reinitialized == rhs.reinitialized;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator1> & lhs, const ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0667a9bbb8555a2127e81724eb62d266";
  }

  static const char* value(const ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0667a9bbb8555a21ULL;
  static const uint64_t static_value2 = 0x27e81724eb62d266ULL;
};

template<class ContainerAllocator>
struct DataType< ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner_msgs/reset_planner_to_defaultResponse";
  }

  static const char* value(const ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"bool reinitialized\n"
;
  }

  static const char* value(const ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reinitialized);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct reset_planner_to_defaultResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner_msgs::reset_planner_to_defaultResponse_<ContainerAllocator>& v)
  {
    s << indent << "reinitialized: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reinitialized);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MSGS_MESSAGE_RESET_PLANNER_TO_DEFAULTRESPONSE_H
