// Generated by gencpp from file planner_msgs/array1d_double.msg
// DO NOT EDIT!


#ifndef PLANNER_MSGS_MESSAGE_ARRAY1D_DOUBLE_H
#define PLANNER_MSGS_MESSAGE_ARRAY1D_DOUBLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planner_msgs
{
template <class ContainerAllocator>
struct array1d_double_
{
  typedef array1d_double_<ContainerAllocator> Type;

  array1d_double_()
    : array1d_double()  {
    }
  array1d_double_(const ContainerAllocator& _alloc)
    : array1d_double(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _array1d_double_type;
  _array1d_double_type array1d_double;





  typedef boost::shared_ptr< ::planner_msgs::array1d_double_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner_msgs::array1d_double_<ContainerAllocator> const> ConstPtr;

}; // struct array1d_double_

typedef ::planner_msgs::array1d_double_<std::allocator<void> > array1d_double;

typedef boost::shared_ptr< ::planner_msgs::array1d_double > array1d_doublePtr;
typedef boost::shared_ptr< ::planner_msgs::array1d_double const> array1d_doubleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner_msgs::array1d_double_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner_msgs::array1d_double_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner_msgs::array1d_double_<ContainerAllocator1> & lhs, const ::planner_msgs::array1d_double_<ContainerAllocator2> & rhs)
{
  return lhs.array1d_double == rhs.array1d_double;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner_msgs::array1d_double_<ContainerAllocator1> & lhs, const ::planner_msgs::array1d_double_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::array1d_double_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::array1d_double_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::array1d_double_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::array1d_double_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::array1d_double_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::array1d_double_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner_msgs::array1d_double_<ContainerAllocator> >
{
  static const char* value()
  {
    return "053e2cce4d87337b8c6a7306fb74d968";
  }

  static const char* value(const ::planner_msgs::array1d_double_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x053e2cce4d87337bULL;
  static const uint64_t static_value2 = 0x8c6a7306fb74d968ULL;
};

template<class ContainerAllocator>
struct DataType< ::planner_msgs::array1d_double_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner_msgs/array1d_double";
  }

  static const char* value(const ::planner_msgs::array1d_double_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner_msgs::array1d_double_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] array1d_double\n"
;
  }

  static const char* value(const ::planner_msgs::array1d_double_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner_msgs::array1d_double_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.array1d_double);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct array1d_double_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner_msgs::array1d_double_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner_msgs::array1d_double_<ContainerAllocator>& v)
  {
    s << indent << "array1d_double[]" << std::endl;
    for (size_t i = 0; i < v.array1d_double.size(); ++i)
    {
      s << indent << "  array1d_double[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.array1d_double[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MSGS_MESSAGE_ARRAY1D_DOUBLE_H
